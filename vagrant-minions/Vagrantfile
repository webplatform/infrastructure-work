# -*- mode: ruby -*-

# Minions config, sample config:
#
# # file: ./minions.yml
# ---
#   - name: app0
#   - name: db-masterdb
#     provider: openstack
#   - name: sessions1
#
require 'yaml'
vagrant_minions = YAML.load_file 'minions.yml'

$update_salt_ip = <<SALT_IP
if [ -d /etc/salt ]; then
  if [ -f /home/vagrant/.grains ]; then
    cp /home/vagrant/.grains /etc/salt/grains
  fi
fi

if [ -f /home/vagrant/.ip ]; then
  # Make sure its really only has a line with numbers
  # we will not validate if its a valid IP further.
  if grep -q '^[1-9].*[1-9]$' /home/vagrant/.ip; then
    IP=`cat /home/vagrant/.ip`
  else
    # Lets not give bogus data then
    >&2 echo "File in webplatform/ops clone the file ../vagrant-workbench/.ip will update itself by Vagrant"
    >&2 echo "This file must contain ONLY an IP address so that this minion can connect to it."
    >&2 echo "Giving 127.0.0.1 as salt master in /etc/hosts as a fallback."
    IP="127.0.0.1"
  fi
else
  # No /home/vagrant/.ip file
  # Lets not give bogus data
  >&2 echo "Could not fine vagrant-workbench IP address, please make sure there is a VM there."
  >&2 echo "Giving 127.0.0.1 as salt master in /etc/hosts as a fallback."
  IP="127.0.0.1"
fi

# If line with string salt dont exist
if grep -q 'salt$' /etc/hosts; then
  # Line exists, lets update entry
  sed -i "s/.*salt$/$IP\tsalt/" /etc/hosts
  echo "Updated /etc/hosts entry IP for salt to $IP"
else
  # Append it to the hosts file
  # I tried to do an echo here, didnt work, lets keep it
  # like that here instead.
  cat /home/vagrant/.ip | sed -e "s/$/\tsalt/" >> /etc/hosts
  echo "Added /etc/hosts entry IP for salt to $IP"
fi
SALT_IP

$post_up_message = <<POST_UP

  This is a WebPlatform operations Vagrant minions minion

  This VM is meant to be managed by a salt master.

  If you got no error message so far about the vagrant-workbench IP address,
  you should be good to go and see this minion in the other VM.

  Have fun!

POST_UP

Vagrant.configure("2") do |config|
  config.vm.box = 'trusty-cloud'
  config.vm.box_url = 'https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box'
  config.ssh.forward_agent = true

  config.vm.network "private_network", type: "dhcp"

  config.vm.synced_folder ".", "/vagrant", disabled: true

  config.vm.provision "file", source: "../vagrant-workbench/.ip", destination: "/home/vagrant/.ip", run: "always"
  config.vm.provision "file", source: "../vagrant-workbench/.grains", destination: "/home/vagrant/.grains", run: "always"

  if Vagrant.has_plugin?("vagrant-cachier")
    # Configure cached packages to be shared between instances of the same base box.
    # More info on http://fgrehm.viewdocs.io/vagrant-cachier/usage
    config.cache.scope = :box

    config.cache.synced_folder_opts = {
      type: :nfs,
      mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
    }
    # ref: http://docs.vagrantup.com/v2/synced-folders/basic_usage.html
  end
  config.cache.enable :apt

  # Common Salt settings
  config.vm.provision :salt do |s|
    s.verbose = false
  end

  vagrant_minions.each do |minion|
    config.vm.define minion["name"] do |m|
      m.vm.hostname = minion["name"] + ".workbench.wpdn"
      if minion['provider'] == 'openstack'
        if ENV['OS_AUTH_URL']
          require 'vagrant-openstack-plugin'
          # Use of: https://github.com/cloudbau/vagrant-openstack-plugin
          # See also http://pastebin.com/aEZk6Mws
          if Vagrant.has_plugin?("vagrant-openstack-plugin")
            if ENV['VAGRANT_OS_PRIVATE_KEY']
              m.ssh.private_key_path = "#{ENV['VAGRANT_OS_PRIVATE_KEY']}"
            end
            m.vm.box_url   = 'https://github.com/cloudbau/vagrant-openstack-plugin/raw/master/dummy.box'
            m.vm.box       = "dummy"
            m.vm.provider :openstack do |os|
              os.endpoint     = "#{ENV['OS_AUTH_URL']}/tokens"
              os.user_data    = File.read('./userdata-vagrant-minion.yml') # user_data expects string, even though its written in YAML format
              os.username     = "#{ENV['OS_USERNAME']}"
              os.api_key      = "#{ENV['OS_PASSWORD']}"
              os.tenant       = "#{ENV['OS_TENANT_NAME']}"
              os.flavor       = "#{ENV['VAGRANT_OS_FLAVOR']}"
              os.image        = "#{ENV['VAGRANT_OS_IMAGE']}"
              os.networks     = ["#{ENV['VAGRANT_OS_NETWORKS']}"]
              os.keypair_name = "#{ENV['VAGRANT_OS_KEYNAME']}"
              os.ssh_username = "#{ENV['VAGRANT_OS_DEFAULT_USERNAME']}"
            end
          end
        end
      else
        m.vm.provider "virtualbox" do |v|
          v.name = m.vm.hostname
          if minion["cpu_cap"]
            v.customize ["modifyvm", :id, "--cpuexecutioncap", minion["cpu_cap"].to_i.to_s]
          end
          if minion["ram"]
            v.customize ["modifyvm", :id, "--memory", minion["ram"].to_i.to_s]
          end
          v.customize ['modifyvm', :id, '--ostype', 'Ubuntu_64']
        end
      end
      if minion["mounts"].is_a?(Array)
        minion['mounts'].each do |dir|
          m.vm.synced_folder dir['host'], dir['guest'], type: 'nfs', create: true
        end
      end
      m.vm.provision "shell" do |s|
        s.inline = "touch /etc/salt/minion.d/workbench.conf ; grep -q -e $1 /etc/salt/minion.d/workbench.conf || printf \"id: $1\" >> /etc/salt/minion.d/workbench.conf"
        s.args   = minion["name"]
      end
      if minion["ports"].is_a?(Array)
        minion['ports'].each do |port|
          # Gotta figure out how to do proper if here. #gottalearnruby
          if port["protocol"]
            m.vm.network :forwarded_port, host: port['host'], guest: port['guest'], protocol: port['protocol'], auto_correct: true
          else
            m.vm.network :forwarded_port, host: port['host'], guest: port['guest'], auto_correct: true
          end
        end
      end
    end
  end

  config.vm.provision :shell, inline: $update_salt_ip, run: "always"
  config.vm.post_up_message = $post_up_message
end

# vi: set ft=ruby :
